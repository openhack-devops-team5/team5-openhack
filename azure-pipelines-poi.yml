# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

#change to test a PR

trigger:
  branches:
    include:
    - main
  paths:
    include:
     - azure-pipelines-poi.yml
     - apis/poi

pr:
  branches:
    include:
    - main
  paths:
    include:
     - azure-pipelines-poi.yml
     - apis/poi

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: 'apis/poi/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  ConnectionStrings.myDrivingDB: 'Server=tcp:$(SQLSERVER),1433;Initial Catalog=$(SQLDBNAME);Persist Security Info=False;User ID=$(SQLUSER);Password=$(SQLPASSWORD);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
  # -group: SQLSecrets

steps:
- task: NuGetToolInstaller@1

- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'

# Azure Key Vault
# Download Azure Key Vault secrets
- task: AzureKeyVault@2
  inputs:
    azureSubscription: 'AzKeyVault'
    KeyVaultName: 'openhackc7p18aw4kv'
    SecretsFilter: '*'
    RunAsPreJob: true

- bash: |
      cat apis/poi/tests/IntegrationTests/appsettings.json
  displayName: 'Pre-transform settings file'

- task: FileTransform@2
  displayName: "Transform Json"
  inputs:
    folderPath: '$(System.DefaultWorkingDirectory)/**/'
    xmlTransformationRules: 
    jsonTargetFiles: '**/appsettings.json'

- bash: |
      cat apis/poi/tests/IntegrationTests/appsettings.json
  displayName: 'Post-transform settings file'

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '$(solution)'
    workingDirectory: '.'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    # projects: 'apis/poi/**/UnitTests.csproj'
    projects: '$(solution)' #use this when we want to run all tests in the solution (including integration tests)
    workingDirectory: '.'

- task: Docker@2
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    containerRegistry: 'acr-openhack-team5'
    repository: 'devopsoh/api-poi'
    command: 'build'
    Dockerfile: 'apis/poi/**/Dockerfile'
    arguments: '--build-arg build_version=$(Build.BuildId)'

- task: Docker@2
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    containerRegistry: 'acr-openhack-team5'
    repository: 'devopsoh/api-poi'
    command: 'push'

- task: CreateWorkItem@1
  condition: failed()
  inputs:
    workItemType: 'Issue'
    title: 'Build Failed'
    associate: true